version: 0.2

env:
  variables:
    REPOSITORY_NAME: "hello-springboot-app"
    AWS_REGION: "us-east-1"
    EKS_CLUSTER_NAME: "wonderful-rock-potato"
    MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo "Installing required tools..."
      - apt-get update -y
      - apt-get install -y maven docker.io
      - curl -LO "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x kubectl
      - mv kubectl /usr/local/bin/

  pre_build:
    commands:
      - echo "Setting up AWS credentials..."
      - export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - echo "Checking for ECR repository..."
      - aws ecr describe-repositories --repository-names $REPOSITORY_NAME --region $AWS_REGION || aws ecr create-repository --repository-name $REPOSITORY_NAME --region $AWS_REGION

  build:
    commands:
      - echo "Building Java application..."
      - cd Jenkins_Assignment_7/hello-springboot-app
      - mvn clean package
      - echo "Building Docker image..."
      - docker build -t $REPOSITORY_NAME:latest .
      - docker tag $REPOSITORY_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME:latest

  post_build:
    commands:
      - echo "Pushing Docker image to ECR..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME:latest
      - echo "Configuring kubectl..."
      - aws eks update-kubeconfig --name wonderful-rock-potato --region us-east-1
      - echo "Checking deployment.yaml contents..."
      - cat deployment.yaml
      - echo "Deploying to EKS..."
      - kubectl apply -f deployment.yaml
      - echo "Verifying deployment..."
      - kubectl rollout status deployment/hello-springboot-app --timeout=300s
      - echo "Getting service URL..."
      - kubectl get svc hello-springboot-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
      - kubectl get pods

artifacts:
  files:
    - Jenkins_Assignment_7/hello-springboot-app/target/*.jar

cache:
  paths:
    - '.m2/**/*'
    - 'Jenkins_Assignment_7/hello-springboot-app/target/**/*'
